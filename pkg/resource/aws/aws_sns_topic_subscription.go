// GENERATED, DO NOT EDIT THIS FILE
package aws

import (
	"github.com/zclconf/go-cty/cty"

	"github.com/cloudskiff/driftctl/pkg/helpers"
	"github.com/cloudskiff/driftctl/pkg/resource"
)

const AwsSnsTopicSubscriptionResourceType = "aws_sns_topic_subscription"

type AwsSnsTopicSubscription struct {
	Arn                          *string    `cty:"arn" computed:"true"`
	ConfirmationTimeoutInMinutes *int       `cty:"confirmation_timeout_in_minutes"`
	DeliveryPolicy               *string    `cty:"delivery_policy" jsonstring:"true"`
	Endpoint                     *string    `cty:"endpoint"`
	EndpointAutoConfirms         *bool      `cty:"endpoint_auto_confirms"`
	FilterPolicy                 *string    `cty:"filter_policy" jsonstring:"true"`
	Id                           string     `cty:"id" computed:"true"`
	Protocol                     *string    `cty:"protocol"`
	RawMessageDelivery           *bool      `cty:"raw_message_delivery"`
	TopicArn                     *string    `cty:"topic_arn"`
	CtyVal                       *cty.Value `diff:"-"`
}

func (r *AwsSnsTopicSubscription) TerraformId() string {
	return r.Id
}

func (r *AwsSnsTopicSubscription) TerraformType() string {
	return AwsSnsTopicSubscriptionResourceType
}

func (r *AwsSnsTopicSubscription) CtyValue() *cty.Value {
	return r.CtyVal
}

func initSnsTopicSubscriptionMetaData(resourceSchemaRepository resource.SchemaRepositoryInterface) {
	resourceSchemaRepository.UpdateSchema(AwsSnsTopicSubscriptionResourceType, map[string]func(attributeSchema *resource.AttributeSchema){
		"delivery_policy": func(attributeSchema *resource.AttributeSchema) {
			attributeSchema.JsonString = true
		},
		"filter_policy": func(attributeSchema *resource.AttributeSchema) {
			attributeSchema.JsonString = true
		},
	})

	resourceSchemaRepository.SetNormalizeFunc(AwsSnsTopicSubscriptionResourceType, func(res *resource.AbstractResource) {
		val := res.Attrs
		jsonString, err := helpers.NormalizeJsonString((*val)["delivery_policy"])
		if err == nil {
			val.SafeSet([]string{"delivery_policy"}, jsonString)
		}

		jsonString, err = helpers.NormalizeJsonString((*val)["filter_policy"])
		if err == nil {
			val.SafeSet([]string{"filter_policy"}, jsonString)
		}

		val.DeleteIfDefault("endpoint_auto_confirms")

		v, exists := val.Get("confirmation_timeout_in_minutes")
		if exists && v.(float64) == 1 {
			val.SafeDelete([]string{"confirmation_timeout_in_minutes"})
		}
	})
}
