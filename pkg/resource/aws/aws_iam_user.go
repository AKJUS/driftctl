// GENERATED, DO NOT EDIT THIS FILE
package aws

import (
	"github.com/cloudskiff/driftctl/pkg/resource"
	"github.com/zclconf/go-cty/cty"
)

const AwsIamUserResourceType = "aws_iam_user"

type AwsIamUser struct {
	Arn                 *string           `cty:"arn" computed:"true"`
	ForceDestroy        *bool             `cty:"force_destroy" diff:"-"`
	Id                  string            `cty:"id" computed:"true"`
	Name                *string           `cty:"name"`
	Path                *string           `cty:"path"`
	PermissionsBoundary *string           `cty:"permissions_boundary"`
	Tags                map[string]string `cty:"tags"`
	UniqueId            *string           `cty:"unique_id" computed:"true"`
	CtyVal              *cty.Value        `diff:"-"`
}

func (r *AwsIamUser) TerraformId() string {
	return r.Id
}

func (r *AwsIamUser) TerraformType() string {
	return AwsIamUserResourceType
}

func (r *AwsIamUser) CtyValue() *cty.Value {
	return r.CtyVal
}

func initAwsIAMUserMetaData(resourceSchemaRepository resource.SchemaRepositoryInterface) {
	resourceSchemaRepository.SetNormalizeFunc(AwsIamUserResourceType, func(val *resource.Attributes) {
		permissionsBoundary, exist := val.Get("permissions_boundary")
		if exist && permissionsBoundary == "" {
			val.SafeDelete([]string{"permissions_boundary"})
		}
		val.SafeDelete([]string{"force_destroy"})
	})
}
